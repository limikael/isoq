

//
// This file is automatically generated.
//
// Don't edit this file, and don't put it under version control!
//

import {IsoqRequestHandler} from "/home/micke/Repo/isoq/src/main/server-exports.js";
import * as clientModule from "/tmp/isoq-4808b68bbc4b94b6727145b00909df8ed31d5e4a/client-ssr.js";
let clientSource="var fn=Object.create;var Ke=Object.defineProperty;var _n=Object.getOwnPropertyDescriptor;var dn=Object.getOwnPropertyNames;var hn=Object.getPrototypeOf,pn=Object.prototype.hasOwnProperty;var Ye=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var mn=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of dn(e))!pn.call(t,o)&&o!==n&&Ke(t,o,{get:()=>e[o],enumerable:!(r=_n(e,o))||r.enumerable});return t};var Qe=(t,e,n)=>(n=t!=null?fn(hn(t)):{},mn(e||!t||!t.__esModule?Ke(n,\"default\",{value:t,enumerable:!0}):n,t));var Yt=Ye((ze,Ge)=>{(function(t,e){typeof ze==\"object\"&&typeof Ge<\"u\"?Ge.exports=e():typeof define==\"function\"&&define.amd?define(e):(t=typeof globalThis<\"u\"?globalThis:t||self,t.resolveURI=e())})(ze,(function(){\"use strict\";let t=/^[\\w+.-]+:\\/\\//,e=/^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?(\\?[^#]*)?(#.*)?/,n=/^file:(?:\\/\\/((?![a-z]:)[^/#?]*)?)?(\\/?[^#?]*)(\\?[^#]*)?(#.*)?/i;function r(_){return t.test(_)}function o(_){return _.startsWith(\"//\")}function i(_){return _.startsWith(\"/\")}function s(_){return _.startsWith(\"file:\")}function l(_){return/^[.?#]/.test(_)}function a(_){let h=e.exec(_);return f(h[1],h[2]||\"\",h[3],h[4]||\"\",h[5]||\"/\",h[6]||\"\",h[7]||\"\")}function c(_){let h=n.exec(_),d=h[2];return f(\"file:\",\"\",h[1]||\"\",\"\",i(d)?d:\"/\"+d,h[3]||\"\",h[4]||\"\")}function f(_,h,d,w,C,x,E){return{scheme:_,user:h,host:d,port:w,path:C,query:x,hash:E,type:7}}function u(_){if(o(_)){let d=a(\"http:\"+_);return d.scheme=\"\",d.type=6,d}if(i(_)){let d=a(\"http://foo.com\"+_);return d.scheme=\"\",d.host=\"\",d.type=5,d}if(s(_))return c(_);if(r(_))return a(_);let h=a(\"http://foo.com/\"+_);return h.scheme=\"\",h.host=\"\",h.type=_?_.startsWith(\"?\")?3:_.startsWith(\"#\")?2:4:1,h}function g(_){if(_.endsWith(\"/..\"))return _;let h=_.lastIndexOf(\"/\");return _.slice(0,h+1)}function p(_,h){y(h,h.type),_.path===\"/\"?_.path=h.path:_.path=g(h.path)+_.path}function y(_,h){let d=h<=4,w=_.path.split(\"/\"),C=1,x=0,E=!1;for(let L=1;L<w.length;L++){let N=w[L];if(!N){E=!0;continue}if(E=!1,N!==\".\"){if(N===\"..\"){x?(E=!0,x--,C--):d&&(w[C++]=N);continue}w[C++]=N,x++}}let O=\"\";for(let L=1;L<C;L++)O+=\"/\"+w[L];(!O||E&&!O.endsWith(\"/..\"))&&(O+=\"/\"),_.path=O}function R(_,h){if(!_&&!h)return\"\";let d=u(_),w=d.type;if(h&&w!==7){let x=u(h),E=x.type;switch(w){case 1:d.hash=x.hash;case 2:d.query=x.query;case 3:case 4:p(d,x);case 5:d.user=x.user,d.host=x.host,d.port=x.port;case 6:d.scheme=x.scheme}E>w&&(w=E)}y(d,w);let C=d.query+d.hash;switch(w){case 2:case 3:return C;case 4:{let x=d.path.slice(1);return x?l(h||_)&&!l(x)?\"./\"+x+C:x+C:C||\".\"}case 5:return d.path+C;default:return d.scheme+\"//\"+d.user+d.host+d.port+d.path+C}}return R}))});var sn=Ye((Oo,on)=>{\"use strict\";function T(t){if(typeof t!=\"string\")throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(t))}function rn(t,e){for(var n=\"\",r=0,o=-1,i=0,s,l=0;l<=t.length;++l){if(l<t.length)s=t.charCodeAt(l);else{if(s===47)break;s=47}if(s===47){if(!(o===l-1||i===1))if(o!==l-1&&i===2){if(n.length<2||r!==2||n.charCodeAt(n.length-1)!==46||n.charCodeAt(n.length-2)!==46){if(n.length>2){var a=n.lastIndexOf(\"/\");if(a!==n.length-1){a===-1?(n=\"\",r=0):(n=n.slice(0,a),r=n.length-1-n.lastIndexOf(\"/\")),o=l,i=0;continue}}else if(n.length===2||n.length===1){n=\"\",r=0,o=l,i=0;continue}}e&&(n.length>0?n+=\"/..\":n=\"..\",r=2)}else n.length>0?n+=\"/\"+t.slice(o+1,l):n=t.slice(o+1,l),r=l-o-1;o=l,i=0}else s===46&&i!==-1?++i:i=-1}return n}function Ir(t,e){var n=e.dir||e.root,r=e.base||(e.name||\"\")+(e.ext||\"\");return n?n===e.root?n+r:n+t+r:r}var z={resolve:function(){for(var e=\"\",n=!1,r,o=arguments.length-1;o>=-1&&!n;o--){var i;o>=0?i=arguments[o]:(r===void 0&&(r=process.cwd()),i=r),T(i),i.length!==0&&(e=i+\"/\"+e,n=i.charCodeAt(0)===47)}return e=rn(e,!n),n?e.length>0?\"/\"+e:\"/\":e.length>0?e:\".\"},normalize:function(e){if(T(e),e.length===0)return\".\";var n=e.charCodeAt(0)===47,r=e.charCodeAt(e.length-1)===47;return e=rn(e,!n),e.length===0&&!n&&(e=\".\"),e.length>0&&r&&(e+=\"/\"),n?\"/\"+e:e},isAbsolute:function(e){return T(e),e.length>0&&e.charCodeAt(0)===47},join:function(){if(arguments.length===0)return\".\";for(var e,n=0;n<arguments.length;++n){var r=arguments[n];T(r),r.length>0&&(e===void 0?e=r:e+=\"/\"+r)}return e===void 0?\".\":z.normalize(e)},relative:function(e,n){if(T(e),T(n),e===n||(e=z.resolve(e),n=z.resolve(n),e===n))return\"\";for(var r=1;r<e.length&&e.charCodeAt(r)===47;++r);for(var o=e.length,i=o-r,s=1;s<n.length&&n.charCodeAt(s)===47;++s);for(var l=n.length,a=l-s,c=i<a?i:a,f=-1,u=0;u<=c;++u){if(u===c){if(a>c){if(n.charCodeAt(s+u)===47)return n.slice(s+u+1);if(u===0)return n.slice(s+u)}else i>c&&(e.charCodeAt(r+u)===47?f=u:u===0&&(f=0));break}var g=e.charCodeAt(r+u),p=n.charCodeAt(s+u);if(g!==p)break;g===47&&(f=u)}var y=\"\";for(u=r+f+1;u<=o;++u)(u===o||e.charCodeAt(u)===47)&&(y.length===0?y+=\"..\":y+=\"/..\");return y.length>0?y+n.slice(s+f):(s+=f,n.charCodeAt(s)===47&&++s,n.slice(s))},_makeLong:function(e){return e},dirname:function(e){if(T(e),e.length===0)return\".\";for(var n=e.charCodeAt(0),r=n===47,o=-1,i=!0,s=e.length-1;s>=1;--s)if(n=e.charCodeAt(s),n===47){if(!i){o=s;break}}else i=!1;return o===-1?r?\"/\":\".\":r&&o===1?\"//\":e.slice(0,o)},basename:function(e,n){if(n!==void 0&&typeof n!=\"string\")throw new TypeError('\"ext\" argument must be a string');T(e);var r=0,o=-1,i=!0,s;if(n!==void 0&&n.length>0&&n.length<=e.length){if(n.length===e.length&&n===e)return\"\";var l=n.length-1,a=-1;for(s=e.length-1;s>=0;--s){var c=e.charCodeAt(s);if(c===47){if(!i){r=s+1;break}}else a===-1&&(i=!1,a=s+1),l>=0&&(c===n.charCodeAt(l)?--l===-1&&(o=s):(l=-1,o=a))}return r===o?o=a:o===-1&&(o=e.length),e.slice(r,o)}else{for(s=e.length-1;s>=0;--s)if(e.charCodeAt(s)===47){if(!i){r=s+1;break}}else o===-1&&(i=!1,o=s+1);return o===-1?\"\":e.slice(r,o)}},extname:function(e){T(e);for(var n=-1,r=0,o=-1,i=!0,s=0,l=e.length-1;l>=0;--l){var a=e.charCodeAt(l);if(a===47){if(!i){r=l+1;break}continue}o===-1&&(i=!1,o=l+1),a===46?n===-1?n=l:s!==1&&(s=1):n!==-1&&(s=-1)}return n===-1||o===-1||s===0||s===1&&n===o-1&&n===r+1?\"\":e.slice(n,o)},format:function(e){if(e===null||typeof e!=\"object\")throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e);return Ir(\"/\",e)},parse:function(e){T(e);var n={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return n;var r=e.charCodeAt(0),o=r===47,i;o?(n.root=\"/\",i=1):i=0;for(var s=-1,l=0,a=-1,c=!0,f=e.length-1,u=0;f>=i;--f){if(r=e.charCodeAt(f),r===47){if(!c){l=f+1;break}continue}a===-1&&(c=!1,a=f+1),r===46?s===-1?s=f:u!==1&&(u=1):s!==-1&&(u=-1)}return s===-1||a===-1||u===0||u===1&&s===a-1&&s===l+1?a!==-1&&(l===0&&o?n.base=n.name=e.slice(1,a):n.base=n.name=e.slice(l,a)):(l===0&&o?(n.name=e.slice(1,s),n.base=e.slice(1,a)):(n.name=e.slice(l,s),n.base=e.slice(l,a)),n.ext=e.slice(s,a)),l>0?n.dir=e.slice(0,l-1):o&&(n.dir=\"/\"),n},sep:\"/\",delimiter:\":\",win32:null,posix:null};z.posix=z;on.exports=z});var se,m,nt,vn,W,Xe,rt,ot,it,Se,ye,xe,st,G={},lt=[],gn=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,J=Array.isArray;function A(t,e){for(var n in e)t[n]=e[n];return t}function we(t){t&&t.parentNode&&t.parentNode.removeChild(t)}function F(t,e,n){var r,o,i,s={};for(i in e)i==\"key\"?r=e[i]:i==\"ref\"?o=e[i]:s[i]=e[i];if(arguments.length>2&&(s.children=arguments.length>3?se.call(arguments,2):n),typeof t==\"function\"&&t.defaultProps!=null)for(i in t.defaultProps)s[i]===void 0&&(s[i]=t.defaultProps[i]);return oe(t,s,r,o,null)}function oe(t,e,n,r,o){var i={type:t,props:e,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:o??++nt,__i:-1,__u:0};return o==null&&m.vnode!=null&&m.vnode(i),i}function k(t){return t.children}function I(t,e){this.props=t,this.context=e}function q(t,e){if(e==null)return t.__?q(t.__,t.__i+1):null;for(var n;e<t.__k.length;e++)if((n=t.__k[e])!=null&&n.__e!=null)return n.__e;return typeof t.type==\"function\"?q(t):null}function ut(t){var e,n;if((t=t.__)!=null&&t.__c!=null){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if((n=t.__k[e])!=null&&n.__e!=null){t.__e=t.__c.base=n.__e;break}return ut(t)}}function be(t){(!t.__d&&(t.__d=!0)&&W.push(t)&&!ie.__r++||Xe!=m.debounceRendering)&&((Xe=m.debounceRendering)||rt)(ie)}function ie(){for(var t,e,n,r,o,i,s,l=1;W.length;)W.length>l&&W.sort(ot),t=W.shift(),l=W.length,t.__d&&(n=void 0,o=(r=(e=t).__v).__e,i=[],s=[],e.__P&&((n=A({},r)).__v=r.__v+1,m.vnode&&m.vnode(n),ke(e.__P,n,r,e.__n,e.__P.namespaceURI,32&r.__u?[o]:null,i,o??q(r),!!(32&r.__u),s),n.__v=r.__v,n.__.__k[n.__i]=n,ft(i,n,s),n.__e!=o&&ut(n)));ie.__r=0}function ct(t,e,n,r,o,i,s,l,a,c,f){var u,g,p,y,R,_,h=r&&r.__k||lt,d=e.length;for(a=yn(n,e,h,a,d),u=0;u<d;u++)(p=n.__k[u])!=null&&(g=p.__i==-1?G:h[p.__i]||G,p.__i=u,_=ke(t,p,g,o,i,s,l,a,c,f),y=p.__e,p.ref&&g.ref!=p.ref&&(g.ref&&Ee(g.ref,null,p),f.push(p.ref,p.__c||y,p)),R==null&&y!=null&&(R=y),4&p.__u||g.__k===p.__k?a=at(p,a,t):typeof p.type==\"function\"&&_!==void 0?a=_:y&&(a=y.nextSibling),p.__u&=-7);return n.__e=R,a}function yn(t,e,n,r,o){var i,s,l,a,c,f=n.length,u=f,g=0;for(t.__k=new Array(o),i=0;i<o;i++)(s=e[i])!=null&&typeof s!=\"boolean\"&&typeof s!=\"function\"?(a=i+g,(s=t.__k[i]=typeof s==\"string\"||typeof s==\"number\"||typeof s==\"bigint\"||s.constructor==String?oe(null,s,null,null,null):J(s)?oe(k,{children:s},null,null,null):s.constructor==null&&s.__b>0?oe(s.type,s.props,s.key,s.ref?s.ref:null,s.__v):s).__=t,s.__b=t.__b+1,l=null,(c=s.__i=xn(s,n,a,u))!=-1&&(u--,(l=n[c])&&(l.__u|=2)),l==null||l.__v==null?(c==-1&&(o>f?g--:o<f&&g++),typeof s.type!=\"function\"&&(s.__u|=4)):c!=a&&(c==a-1?g--:c==a+1?g++:(c>a?g--:g++,s.__u|=4))):t.__k[i]=null;if(u)for(i=0;i<f;i++)(l=n[i])!=null&&(2&l.__u)==0&&(l.__e==r&&(r=q(l)),dt(l,l));return r}function at(t,e,n){var r,o;if(typeof t.type==\"function\"){for(r=t.__k,o=0;r&&o<r.length;o++)r[o]&&(r[o].__=t,e=at(r[o],e,n));return e}t.__e!=e&&(e&&t.type&&!n.contains(e)&&(e=q(t)),n.insertBefore(t.__e,e||null),e=t.__e);do e=e&&e.nextSibling;while(e!=null&&e.nodeType==8);return e}function Z(t,e){return e=e||[],t==null||typeof t==\"boolean\"||(J(t)?t.some(function(n){Z(n,e)}):e.push(t)),e}function xn(t,e,n,r){var o,i,s,l=t.key,a=t.type,c=e[n],f=c!=null&&(2&c.__u)==0;if(c===null&&t.key==null||f&&l==c.key&&a==c.type)return n;if(r>(f?1:0)){for(o=n-1,i=n+1;o>=0||i<e.length;)if((c=e[s=o>=0?o--:i++])!=null&&(2&c.__u)==0&&l==c.key&&a==c.type)return s}return-1}function et(t,e,n){e[0]==\"-\"?t.setProperty(e,n??\"\"):t[e]=n==null?\"\":typeof n!=\"number\"||gn.test(e)?n:n+\"px\"}function re(t,e,n,r,o){var i,s;e:if(e==\"style\")if(typeof n==\"string\")t.style.cssText=n;else{if(typeof r==\"string\"&&(t.style.cssText=r=\"\"),r)for(e in r)n&&e in n||et(t.style,e,\"\");if(n)for(e in n)r&&n[e]==r[e]||et(t.style,e,n[e])}else if(e[0]==\"o\"&&e[1]==\"n\")i=e!=(e=e.replace(it,\"$1\")),s=e.toLowerCase(),e=s in t||e==\"onFocusOut\"||e==\"onFocusIn\"?s.slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r?n.u=r.u:(n.u=Se,t.addEventListener(e,i?xe:ye,i)):t.removeEventListener(e,i?xe:ye,i);else{if(o==\"http://www.w3.org/2000/svg\")e=e.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(e!=\"width\"&&e!=\"height\"&&e!=\"href\"&&e!=\"list\"&&e!=\"form\"&&e!=\"tabIndex\"&&e!=\"download\"&&e!=\"rowSpan\"&&e!=\"colSpan\"&&e!=\"role\"&&e!=\"popover\"&&e in t)try{t[e]=n??\"\";break e}catch{}typeof n==\"function\"||(n==null||n===!1&&e[4]!=\"-\"?t.removeAttribute(e):t.setAttribute(e,e==\"popover\"&&n==1?\"\":n))}}function tt(t){return function(e){if(this.l){var n=this.l[e.type+t];if(e.t==null)e.t=Se++;else if(e.t<n.u)return;return n(m.event?m.event(e):e)}}}function ke(t,e,n,r,o,i,s,l,a,c){var f,u,g,p,y,R,_,h,d,w,C,x,E,O,L,N,ge,U=e.type;if(e.constructor!=null)return null;128&n.__u&&(a=!!(32&n.__u),i=[l=e.__e=n.__e]),(f=m.__b)&&f(e);e:if(typeof U==\"function\")try{if(h=e.props,d=\"prototype\"in U&&U.prototype.render,w=(f=U.contextType)&&r[f.__c],C=f?w?w.props.value:f.__:r,n.__c?_=(u=e.__c=n.__c).__=u.__E:(d?e.__c=u=new U(h,C):(e.__c=u=new I(h,C),u.constructor=U,u.render=Cn),w&&w.sub(u),u.props=h,u.state||(u.state={}),u.context=C,u.__n=r,g=u.__d=!0,u.__h=[],u._sb=[]),d&&u.__s==null&&(u.__s=u.state),d&&U.getDerivedStateFromProps!=null&&(u.__s==u.state&&(u.__s=A({},u.__s)),A(u.__s,U.getDerivedStateFromProps(h,u.__s))),p=u.props,y=u.state,u.__v=e,g)d&&U.getDerivedStateFromProps==null&&u.componentWillMount!=null&&u.componentWillMount(),d&&u.componentDidMount!=null&&u.__h.push(u.componentDidMount);else{if(d&&U.getDerivedStateFromProps==null&&h!==p&&u.componentWillReceiveProps!=null&&u.componentWillReceiveProps(h,C),!u.__e&&u.shouldComponentUpdate!=null&&u.shouldComponentUpdate(h,u.__s,C)===!1||e.__v==n.__v){for(e.__v!=n.__v&&(u.props=h,u.state=u.__s,u.__d=!1),e.__e=n.__e,e.__k=n.__k,e.__k.some(function(j){j&&(j.__=e)}),x=0;x<u._sb.length;x++)u.__h.push(u._sb[x]);u._sb=[],u.__h.length&&s.push(u);break e}u.componentWillUpdate!=null&&u.componentWillUpdate(h,u.__s,C),d&&u.componentDidUpdate!=null&&u.__h.push(function(){u.componentDidUpdate(p,y,R)})}if(u.context=C,u.props=h,u.__P=t,u.__e=!1,E=m.__r,O=0,d){for(u.state=u.__s,u.__d=!1,E&&E(e),f=u.render(u.props,u.state,u.context),L=0;L<u._sb.length;L++)u.__h.push(u._sb[L]);u._sb=[]}else do u.__d=!1,E&&E(e),f=u.render(u.props,u.state,u.context),u.state=u.__s;while(u.__d&&++O<25);u.state=u.__s,u.getChildContext!=null&&(r=A(A({},r),u.getChildContext())),d&&!g&&u.getSnapshotBeforeUpdate!=null&&(R=u.getSnapshotBeforeUpdate(p,y)),N=f,f!=null&&f.type===k&&f.key==null&&(N=_t(f.props.children)),l=ct(t,J(N)?N:[N],e,n,r,o,i,s,l,a,c),u.base=e.__e,e.__u&=-161,u.__h.length&&s.push(u),_&&(u.__E=u.__=null)}catch(j){if(e.__v=null,a||i!=null)if(j.then){for(e.__u|=a?160:128;l&&l.nodeType==8&&l.nextSibling;)l=l.nextSibling;i[i.indexOf(l)]=null,e.__e=l}else{for(ge=i.length;ge--;)we(i[ge]);Ce(e)}else e.__e=n.__e,e.__k=n.__k,j.then||Ce(e);m.__e(j,e,n)}else i==null&&e.__v==n.__v?(e.__k=n.__k,e.__e=n.__e):l=e.__e=bn(n.__e,e,n,r,o,i,s,a,c);return(f=m.diffed)&&f(e),128&e.__u?void 0:l}function Ce(t){t&&t.__c&&(t.__c.__e=!0),t&&t.__k&&t.__k.forEach(Ce)}function ft(t,e,n){for(var r=0;r<n.length;r++)Ee(n[r],n[++r],n[++r]);m.__c&&m.__c(e,t),t.some(function(o){try{t=o.__h,o.__h=[],t.some(function(i){i.call(o)})}catch(i){m.__e(i,o.__v)}})}function _t(t){return typeof t!=\"object\"||t==null||t.__b&&t.__b>0?t:J(t)?t.map(_t):A({},t)}function bn(t,e,n,r,o,i,s,l,a){var c,f,u,g,p,y,R,_=n.props,h=e.props,d=e.type;if(d==\"svg\"?o=\"http://www.w3.org/2000/svg\":d==\"math\"?o=\"http://www.w3.org/1998/Math/MathML\":o||(o=\"http://www.w3.org/1999/xhtml\"),i!=null){for(c=0;c<i.length;c++)if((p=i[c])&&\"setAttribute\"in p==!!d&&(d?p.localName==d:p.nodeType==3)){t=p,i[c]=null;break}}if(t==null){if(d==null)return document.createTextNode(h);t=document.createElementNS(o,d,h.is&&h),l&&(m.__m&&m.__m(e,i),l=!1),i=null}if(d==null)_===h||l&&t.data==h||(t.data=h);else{if(i=i&&se.call(t.childNodes),_=n.props||G,!l&&i!=null)for(_={},c=0;c<t.attributes.length;c++)_[(p=t.attributes[c]).name]=p.value;for(c in _)if(p=_[c],c!=\"children\"){if(c==\"dangerouslySetInnerHTML\")u=p;else if(!(c in h)){if(c==\"value\"&&\"defaultValue\"in h||c==\"checked\"&&\"defaultChecked\"in h)continue;re(t,c,null,p,o)}}for(c in h)p=h[c],c==\"children\"?g=p:c==\"dangerouslySetInnerHTML\"?f=p:c==\"value\"?y=p:c==\"checked\"?R=p:l&&typeof p!=\"function\"||_[c]===p||re(t,c,p,_[c],o);if(f)l||u&&(f.__html==u.__html||f.__html==t.innerHTML)||(t.innerHTML=f.__html),e.__k=[];else if(u&&(t.innerHTML=\"\"),ct(e.type==\"template\"?t.content:t,J(g)?g:[g],e,n,r,d==\"foreignObject\"?\"http://www.w3.org/1999/xhtml\":o,i,s,i?i[0]:n.__k&&q(n,0),l,a),i!=null)for(c=i.length;c--;)we(i[c]);l||(c=\"value\",d==\"progress\"&&y==null?t.removeAttribute(\"value\"):y!=null&&(y!==t[c]||d==\"progress\"&&!y||d==\"option\"&&y!=_[c])&&re(t,c,y,_[c],o),c=\"checked\",R!=null&&R!=t[c]&&re(t,c,R,_[c],o))}return t}function Ee(t,e,n){try{if(typeof t==\"function\"){var r=typeof t.__u==\"function\";r&&t.__u(),r&&e==null||(t.__u=t(e))}else t.current=e}catch(o){m.__e(o,n)}}function dt(t,e,n){var r,o;if(m.unmount&&m.unmount(t),(r=t.ref)&&(r.current&&r.current!=t.__e||Ee(r,null,e)),(r=t.__c)!=null){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(i){m.__e(i,e)}r.base=r.__P=null}if(r=t.__k)for(o=0;o<r.length;o++)r[o]&&dt(r[o],e,n||typeof t.type!=\"function\");n||we(t.__e),t.__c=t.__=t.__e=void 0}function Cn(t,e,n){return this.constructor(t,n)}function ht(t,e,n){var r,o,i,s;e==document&&(e=document.documentElement),m.__&&m.__(t,e),o=(r=typeof n==\"function\")?null:n&&n.__k||e.__k,i=[],s=[],ke(e,t=(!r&&n||e).__k=F(k,null,[t]),o||G,G,e.namespaceURI,!r&&n?[n]:o?null:e.firstChild?se.call(e.childNodes):null,i,!r&&n?n:o?o.__e:e.firstChild,r,s),ft(i,t,s)}function le(t,e){ht(t,e,le)}function P(t){function e(n){var r,o;return this.getChildContext||(r=new Set,(o={})[e.__c]=this,this.getChildContext=function(){return o},this.componentWillUnmount=function(){r=null},this.shouldComponentUpdate=function(i){this.props.value!=i.value&&r.forEach(function(s){s.__e=!0,be(s)})},this.sub=function(i){r.add(i);var s=i.componentWillUnmount;i.componentWillUnmount=function(){r&&r.delete(i),s&&s.call(i)}}),n.children}return e.__c=\"__cC\"+st++,e.__=t,e.Provider=e.__l=(e.Consumer=function(n,r){return n.children(r)}).contextType=e,e}se=lt.slice,m={__e:function(t,e,n,r){for(var o,i,s;e=e.__;)if((o=e.__c)&&!o.__)try{if((i=o.constructor)&&i.getDerivedStateFromError!=null&&(o.setState(i.getDerivedStateFromError(t)),s=o.__d),o.componentDidCatch!=null&&(o.componentDidCatch(t,r||{}),s=o.__d),s)return o.__E=o}catch(l){t=l}throw t}},nt=0,vn=function(t){return t!=null&&t.constructor==null},I.prototype.setState=function(t,e){var n;n=this.__s!=null&&this.__s!=this.state?this.__s:this.__s=A({},this.state),typeof t==\"function\"&&(t=t(A({},n),this.props)),t&&A(n,t),t!=null&&this.__v&&(e&&this._sb.push(e),be(this))},I.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),be(this))},I.prototype.render=k,W=[],rt=typeof Promise==\"function\"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,ot=function(t,e){return t.__v.__b-e.__v.__b},ie.__r=0,it=/(PointerCapture)$|Capture$/i,Se=0,ye=tt(!1),xe=tt(!0),st=0;var V,b,Re,pt,K=0,St=[],S=m,mt=S.__b,vt=S.__r,gt=S.diffed,yt=S.__c,xt=S.unmount,bt=S.__;function Y(t,e){S.__h&&S.__h(b,t,K||e),K=0;var n=b.__H||(b.__H={__:[],__h:[]});return t>=n.__.length&&n.__.push({}),n.__[t]}function H(t){return K=1,wt(kt,t)}function wt(t,e,n){var r=Y(V++,2);if(r.t=t,!r.__c&&(r.__=[n?n(e):kt(void 0,e),function(l){var a=r.__N?r.__N[0]:r.__[0],c=r.t(a,l);a!==c&&(r.__N=[c,r.__[1]],r.__c.setState({}))}],r.__c=b,!b.__f)){var o=function(l,a,c){if(!r.__c.__H)return!0;var f=r.__c.__H.__.filter(function(g){return!!g.__c});if(f.every(function(g){return!g.__N}))return!i||i.call(this,l,a,c);var u=r.__c.props!==l;return f.forEach(function(g){if(g.__N){var p=g.__[0];g.__=g.__N,g.__N=void 0,p!==g.__[0]&&(u=!0)}}),i&&i.call(this,l,a,c)||u};b.__f=!0;var i=b.shouldComponentUpdate,s=b.componentWillUpdate;b.componentWillUpdate=function(l,a,c){if(this.__e){var f=i;i=void 0,o(l,a,c),i=f}s&&s.call(this,l,a,c)},b.shouldComponentUpdate=o}return r.__N||r.__}function Le(t,e){var n=Y(V++,3);!S.__s&&Te(n.__H,e)&&(n.__=t,n.u=e,b.__H.__h.push(n))}function B(t,e){var n=Y(V++,4);!S.__s&&Te(n.__H,e)&&(n.__=t,n.u=e,b.__h.push(n))}function Ne(t){return K=5,Ue(function(){return{current:t}},[])}function Ue(t,e){var n=Y(V++,7);return Te(n.__H,e)&&(n.__=t(),n.__H=e,n.__h=t),n.__}function Pe(t,e){return K=8,Ue(function(){return t},e)}function M(t){var e=b.context[t.__c],n=Y(V++,9);return n.c=t,e?(n.__==null&&(n.__=!0,e.sub(b)),e.props.value):t.__}function Sn(){for(var t;t=St.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(ue),t.__H.__h.forEach(Ie),t.__H.__h=[]}catch(e){t.__H.__h=[],S.__e(e,t.__v)}}S.__b=function(t){b=null,mt&&mt(t)},S.__=function(t,e){t&&e.__k&&e.__k.__m&&(t.__m=e.__k.__m),bt&&bt(t,e)},S.__r=function(t){vt&&vt(t),V=0;var e=(b=t.__c).__H;e&&(Re===b?(e.__h=[],b.__h=[],e.__.forEach(function(n){n.__N&&(n.__=n.__N),n.u=n.__N=void 0})):(e.__h.forEach(ue),e.__h.forEach(Ie),e.__h=[],V=0)),Re=b},S.diffed=function(t){gt&&gt(t);var e=t.__c;e&&e.__H&&(e.__H.__h.length&&(St.push(e)!==1&&pt===S.requestAnimationFrame||((pt=S.requestAnimationFrame)||wn)(Sn)),e.__H.__.forEach(function(n){n.u&&(n.__H=n.u),n.u=void 0})),Re=b=null},S.__c=function(t,e){e.some(function(n){try{n.__h.forEach(ue),n.__h=n.__h.filter(function(r){return!r.__||Ie(r)})}catch(r){e.some(function(o){o.__h&&(o.__h=[])}),e=[],S.__e(r,n.__v)}}),yt&&yt(t,e)},S.unmount=function(t){xt&&xt(t);var e,n=t.__c;n&&n.__H&&(n.__H.__.forEach(function(r){try{ue(r)}catch(o){e=o}}),n.__H=void 0,e&&S.__e(e,n.__v))};var Ct=typeof requestAnimationFrame==\"function\";function wn(t){var e,n=function(){clearTimeout(r),Ct&&cancelAnimationFrame(e),setTimeout(t)},r=setTimeout(n,35);Ct&&(e=requestAnimationFrame(n))}function ue(t){var e=b,n=t.__c;typeof n==\"function\"&&(t.__c=void 0,n()),b=e}function Ie(t){var e=b;t.__c=t.__(),b=e}function Te(t,e){return!t||t.length!==e.length||e.some(function(n,r){return n!==t[r]})}function kt(t,e){return typeof e==\"function\"?e(t):e}function En(t,e){for(var n in e)t[n]=e[n];return t}function Et(t,e){for(var n in t)if(n!==\"__source\"&&!(n in e))return!0;for(var r in e)if(r!==\"__source\"&&t[r]!==e[r])return!0;return!1}function Rt(t,e){this.props=t,this.context=e}(Rt.prototype=new I).isPureReactComponent=!0,Rt.prototype.shouldComponentUpdate=function(t,e){return Et(this.props,t)||Et(this.state,e)};var It=m.__b;m.__b=function(t){t.type&&t.type.__f&&t.ref&&(t.props.ref=t.ref,t.ref=null),It&&It(t)};var zr=typeof Symbol<\"u\"&&Symbol.for&&Symbol.for(\"react.forward_ref\")||3911;var Rn=m.__e;m.__e=function(t,e,n,r){if(t.then){for(var o,i=e;i=i.__;)if((o=i.__c)&&o.__c)return e.__e==null&&(e.__e=n.__e,e.__k=n.__k),o.__c(t,e)}Rn(t,e,n,r)};var Lt=m.unmount;function Mt(t,e,n){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(r){typeof r.__c==\"function\"&&r.__c()}),t.__c.__H=null),(t=En({},t)).__c!=null&&(t.__c.__P===n&&(t.__c.__P=e),t.__c.__e=!0,t.__c=null),t.__k=t.__k&&t.__k.map(function(r){return Mt(r,e,n)})),t}function Ot(t,e,n){return t&&n&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(r){return Ot(r,e,n)}),t.__c&&t.__c.__P===e&&(t.__e&&n.appendChild(t.__e),t.__c.__e=!0,t.__c.__P=n)),t}function Q(){this.__u=0,this.o=null,this.__b=null}function Ft(t){var e=t.__.__c;return e&&e.__a&&e.__a(t)}function ce(){this.i=null,this.l=null}m.unmount=function(t){var e=t.__c;e&&e.__R&&e.__R(),e&&32&t.__u&&(t.type=null),Lt&&Lt(t)},(Q.prototype=new I).__c=function(t,e){var n=e.__c,r=this;r.o==null&&(r.o=[]),r.o.push(n);var o=Ft(r.__v),i=!1,s=function(){i||(i=!0,n.__R=null,o?o(l):l())};n.__R=s;var l=function(){if(!--r.__u){if(r.state.__a){var a=r.state.__a;r.__v.__k[0]=Ot(a,a.__c.__P,a.__c.__O)}var c;for(r.setState({__a:r.__b=null});c=r.o.pop();)c.forceUpdate()}};r.__u++||32&e.__u||r.setState({__a:r.__b=r.__v.__k[0]}),t.then(s,s)},Q.prototype.componentWillUnmount=function(){this.o=[]},Q.prototype.render=function(t,e){if(this.__b){if(this.__v.__k){var n=document.createElement(\"div\"),r=this.__v.__k[0].__c;this.__v.__k[0]=Mt(this.__b,n,r.__O=r.__P)}this.__b=null}var o=e.__a&&F(k,null,t.fallback);return o&&(o.__u&=-33),[F(k,null,e.__a?null:t.children),o]};var Nt=function(t,e,n){if(++n[1]===n[0]&&t.l.delete(e),t.props.revealOrder&&(t.props.revealOrder[0]!==\"t\"||!t.l.size))for(n=t.i;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;t.i=n=n[2]}};(ce.prototype=new I).__a=function(t){var e=this,n=Ft(e.__v),r=e.l.get(t);return r[0]++,function(o){var i=function(){e.props.revealOrder?(r.push(o),Nt(e,t,r)):o()};n?n(i):i()}},ce.prototype.render=function(t){this.i=null,this.l=new Map;var e=Z(t.children);t.revealOrder&&t.revealOrder[0]===\"b\"&&e.reverse();for(var n=e.length;n--;)this.l.set(e[n],this.i=[1,0,this.i]);return t.children},ce.prototype.componentDidUpdate=ce.prototype.componentDidMount=function(){var t=this;this.l.forEach(function(e,n){Nt(t,n,e)})};var In=typeof Symbol<\"u\"&&Symbol.for&&Symbol.for(\"react.element\")||60103,Ln=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,Nn=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,Un=/[A-Z0-9]/g,Pn=typeof document<\"u\",Tn=function(t){return(typeof Symbol<\"u\"&&typeof Symbol()==\"symbol\"?/fil|che|rad/:/fil|che|ra/).test(t)};I.prototype.isReactComponent={},[\"componentWillMount\",\"componentWillReceiveProps\",\"componentWillUpdate\"].forEach(function(t){Object.defineProperty(I.prototype,t,{configurable:!0,get:function(){return this[\"UNSAFE_\"+t]},set:function(e){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:e})}})});var Ut=m.event;function An(){}function Mn(){return this.cancelBubble}function On(){return this.defaultPrevented}m.event=function(t){return Ut&&(t=Ut(t)),t.persist=An,t.isPropagationStopped=Mn,t.isDefaultPrevented=On,t.nativeEvent=t};var Dt,Fn={enumerable:!1,configurable:!0,get:function(){return this.class}},Pt=m.vnode;m.vnode=function(t){typeof t.type==\"string\"&&(function(e){var n=e.props,r=e.type,o={},i=r.indexOf(\"-\")===-1;for(var s in n){var l=n[s];if(!(s===\"value\"&&\"defaultValue\"in n&&l==null||Pn&&s===\"children\"&&r===\"noscript\"||s===\"class\"||s===\"className\")){var a=s.toLowerCase();s===\"defaultValue\"&&\"value\"in n&&n.value==null?s=\"value\":s===\"download\"&&l===!0?l=\"\":a===\"translate\"&&l===\"no\"?l=!1:a[0]===\"o\"&&a[1]===\"n\"?a===\"ondoubleclick\"?s=\"ondblclick\":a!==\"onchange\"||r!==\"input\"&&r!==\"textarea\"||Tn(n.type)?a===\"onfocus\"?s=\"onfocusin\":a===\"onblur\"?s=\"onfocusout\":Nn.test(s)&&(s=a):a=s=\"oninput\":i&&Ln.test(s)?s=s.replace(Un,\"-$$CLIENT_SOURCE$$\").toLowerCase():l===null&&(l=void 0),a===\"oninput\"&&o[s=a]&&(s=\"oninputCapture\"),o[s]=l}}r==\"select\"&&o.multiple&&Array.isArray(o.value)&&(o.value=Z(n.children).forEach(function(c){c.props.selected=o.value.indexOf(c.props.value)!=-1})),r==\"select\"&&o.defaultValue!=null&&(o.value=Z(n.children).forEach(function(c){c.props.selected=o.multiple?o.defaultValue.indexOf(c.props.value)!=-1:o.defaultValue==c.props.value})),n.class&&!n.className?(o.class=n.class,Object.defineProperty(o,\"className\",Fn)):(n.className&&!n.class||n.class&&n.className)&&(o.class=o.className=n.className),e.props=o})(t),t.$typeof=In,Pt&&Pt(t)};var Tt=m.__r;m.__r=function(t){Tt&&Tt(t),Dt=t.__c};var At=m.diffed;m.diffed=function(t){At&&At(t);var e=t.props,n=t.__e;n!=null&&t.type===\"textarea\"&&\"value\"in e&&e.value!==n.value&&(n.value=e.value==null?\"\":e.value),Dt=null};var Vt,Ae,Dn=!1,Wt=m.__r;m.__r=t=>{Vt=t,Ae=0,Wt&&Wt(t)};function Me(t){if(!t)return\"\";if(t.type===k&&t.key==null)return Me(t.__);let e=t.type;typeof e==\"function\"&&(Dn?e=e.name:e=\"C\");let n=t.key;n||(t.__i>=0?n=t.__i:t.__&&t.__.__k?n=t.__.__k.indexOf(t):n=0,n<0&&console.log(\"warning: negative key in refid\"));let r=Me(t.__);return r+(r?\"/\":\"\")+e+n}function Oe(){return Ae++,Me(Vt)+\"#\"+Ae}function Ht(t){if(t===void 0)throw new Error(\"Undefined pathname\");return t.split(\"/\").filter(e=>e.length>0)}function Wn(t,e){function n(r,o){for(var i=[];o<e.length;){var s=e[o];if(s===\"**\"){var l=n(r,o+1);if(l!==null)return i.concat(l);if(r<t.length){var a=n(r+1,o);if(a!==null){var c=String(t[r]);return i.concat([c],a)}}return null}if(r>=t.length)return null;if(s===\"*\")i.push(String(t[r]));else if(s!==String(t[r]))return null;r++,o++}return r===t.length?i:null}return n(0,0)}function Bt(t,e){if(!t)return;let n=new URL(t),r=Ht(n.pathname),o=Ht(e);return Wn(r,o)}function Fe(t,e){let n=t.indexOf(e);return n>=0&&t.splice(n,1),t}var _e=P(),ae=class{constructor(e,n,r){this.isoRefState=e,this.refCount=0,this.current=n,this.ids=[],this.shared=r.shared,this.shared===void 0&&(this.shared=!0)}ref(e){this.ids.includes(e)||this.ids.push(e)}unref(e){Fe(this.ids,e),this.ids.length||this.isoRefState.scheduleSweep()}},fe=class{constructor({initialRefValues:e}={}){if(this.refs={},this.sweepTimeout=null,this.sweepBlockIds=[],e)for(let n in e)this.refs[n]=new ae(this,e[n],{shared:!0})}getRef(e,n,r){return this.refs[e]||(this.refs[e]=new ae(this,n,r),this.scheduleSweep()),this.refs[e]}scheduleSweep(){!globalThis.window||this.sweepTimeout||this.sweepBlockIds.length||(this.sweepTimeout=requestAnimationFrame(this.handleSweep))}handleSweep=()=>{if(this.sweepTimeout=null,!this.sweepBlockIds.length)for(let e in this.refs)this.refs[e].ids.length||delete this.refs[e]};refSweepBlock(e){this.sweepBlockIds.includes(e)||this.sweepBlockIds.push(e)}unrefSweepBlock(e){Fe(this.sweepBlockIds,e),this.sweepBlockIds.length||this.scheduleSweep()}getSharedRefValues(){let e={};for(let n in this.refs)this.refs[n].shared&&(e[n]=this.refs[n].current);return e}};function De({children:t,fallback:e}){let n=M(_e),r=Oe();function o(){return B(()=>(n.refSweepBlock(r),()=>{n.unrefSweepBlock(r)}),[]),e}return F(Q,{fallback:F(o)},t)}function de(t,e={}){typeof e==\"boolean\"&&(e={shared:e});let n=Oe(),o=M(_e).getRef(n,t,e);return B(()=>(o.ref(n),()=>{o.unref(n)}),[]),o}function Vn(t,e,n){B(()=>(t.addEventListener(e,n),()=>{t.removeEventListener(e,n)}),[t,e,n])}function We(t,e){let[n,r]=H(),o=Pe(()=>r({}));Vn(t,e,o)}var Hn=0,fo=Array.isArray;function v(t,e,n,r,o,i){e||(e={});var s,l,a=e;if(\"ref\"in a)for(l in a={},e)l==\"ref\"?s=e[l]:a[l]=e[l];var c={type:t,props:a,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:--Hn,__i:-1,__u:0,__source:o,__self:i};if(typeof t==\"function\"&&(s=t.defaultProps))for(l in s)a[l]===void 0&&(a[l]=s[l]);return m.vnode&&m.vnode(c),c}var $t=P(),Ve=P(),jt=P();function He(){let t=Ne(),e=M($t);return(n=>{t.current!=n&&(t.current=n,e.setUrl(n))})}function he({path:t,children:e}){let n=M(Ve);return Bt(n.url,t)?v(jt.Provider,{value:{path:t},children:e}):v(jt.Provider,{})}var X=class extends EventTarget{constructor({url:e}){super(),this.baseUrl=new URL(e).origin,this.committedUrl=new URL(e).toString(),this.committedVersion=1,this.nextVersion=0,this.nextUrl=\"\",this.isSsr=!globalThis.window,this.isSsr||globalThis.window.addEventListener(\"popstate\",n=>{this.setUrl(String(globalThis.window.location))})}setUrl(e){if(this.isSsr){this.redirectUrl=e;return}this.nextUrl=new URL(e,this.baseUrl).toString(),this.nextVersion?this.nextVersion++:this.nextVersion=this.committedVersion+1,this.dispatchEvent(new Event(\"change\"))}postNavScroll(){let e=globalThis.window,n=new URL(this.committedUrl),r;if(n.hash){let o=n.hash.replace(\"#\",\"\"),i=e.document.getElementsByName(o);i.length&&(r=i[0])}r?r.scrollIntoView({behavior:\"smooth\"}):e.scrollTo(0,0)}commit(){if(this.committedUrl=this.nextUrl,this.committedVersion=this.nextVersion,this.nextVersion=null,this.nextUrl=null,this.dispatchEvent(new Event(\"change\")),!this.isSsr){let e=globalThis.window;e.location!=this.committedUrl&&(e.history.scrollRestoration=\"manual\",e.history.pushState(null,null,this.committedUrl)),setTimeout(()=>this.postNavScroll(),0)}}};function qt({onMount:t,children:e}){return Le(()=>{t&&t()}),e}function Be({routerState:t,children:e}){return We(t,\"change\"),v($t.Provider,{value:t,children:[v(De,{children:v(\"div\",{style:{display:\"contents\"},children:v(qt,{children:v(Ve.Provider,{value:{url:t.committedUrl},children:e})})})},\"route-\"+t.committedVersion),!!t.nextVersion&&v(De,{children:v(\"div\",{style:{display:\"none\"},children:v(qt,{onMount:()=>t.commit(),children:v(Ve.Provider,{value:{url:t.nextUrl},children:e})})})},\"route-\"+t.nextVersion)]})}function qe({error:t}){let[e,n]=H(),r={position:\"fixed\",left:\"0\",top:\"0\",width:\"100%\",height:\"100%\",zOrder:\"100\",backgroundColor:\"#000000\",color:\"#ff0000\",fontSize:\"16px\",fontFamily:\"monospace\",borderStyle:\"solid\",borderWidth:\"0.5em\",borderColor:\"#ff0000\",padding:\"0.5em\",boxSizing:\"border-box\"},o={marginLeft:\"40px\",textDecoration:\"underline\",cursor:\"pointer\"};return v(\"div\",{style:r,children:[v(\"div\",{children:String(t)}),t.stackFrames&&v(k,{children:[t.stackFrames.filter(i=>e||!i.noisy).map(i=>v(\"div\",{style:{marginLeft:\"40px\"},children:[\"at \",i.file,\":\",i.line,\":\",i.column,i.name?` (in ${i.name})`:\"\"]})),!e&&t.stackFrames.filter(i=>i.noisy).length>0&&v(\"a\",{style:o,onClick:()=>n(!0),children:\"more...\"})]})]})}var je=class extends I{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,n){this.props.onError&&this.props.onError(e,n)}render(e,n){return n.hasError?this.props.fallback??null:this.props.children}};function $e({fallback:t,children:e}){let[n,r]=H(),o=$();o.errorFallback=t;async function i(l){let a=new Error;a.name=l.name,a.message=l.message,r(a),await o.processError(l),r(l)}let s=t;return n?v(s,{error:n}):v(je,{onError:i,children:e})}var ee=\"<unknown>\";function zt(t){var e=t.split(`\n`);return e.reduce(function(n,r){var o=$n(r)||Gn(r)||Kn(r)||er(r)||Qn(r);return o&&n.push(o),n},[])}var jn=/^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,qn=/\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;function $n(t){var e=jn.exec(t);if(!e)return null;var n=e[2]&&e[2].indexOf(\"native\")===0,r=e[2]&&e[2].indexOf(\"eval\")===0,o=qn.exec(e[2]);return r&&o!=null&&(e[2]=o[1],e[3]=o[2],e[4]=o[3]),{file:n?null:e[2],methodName:e[1]||ee,arguments:n?[e[2]]:[],lineNumber:e[3]?+e[3]:null,column:e[4]?+e[4]:null}}var zn=/^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;function Gn(t){var e=zn.exec(t);return e?{file:e[2],methodName:e[1]||ee,arguments:[],lineNumber:+e[3],column:e[4]?+e[4]:null}:null}var Jn=/^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,Zn=/(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;function Kn(t){var e=Jn.exec(t);if(!e)return null;var n=e[3]&&e[3].indexOf(\" > eval\")>-1,r=Zn.exec(e[3]);return n&&r!=null&&(e[3]=r[1],e[4]=r[2],e[5]=null),{file:e[3],methodName:e[1]||ee,arguments:e[2]?e[2].split(\",\"):[],lineNumber:e[4]?+e[4]:null,column:e[5]?+e[5]:null}}var Yn=/^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;function Qn(t){var e=Yn.exec(t);return e?{file:e[3],methodName:e[1]||ee,arguments:[],lineNumber:+e[4],column:e[5]?+e[5]:null}:null}var Xn=/^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;function er(t){var e=Xn.exec(t);return e?{file:e[2],methodName:e[1]||ee,arguments:[],lineNumber:+e[3],column:e[4]?+e[4]:null}:null}var nr=44;var Gt=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",rr=new Uint8Array(64),Zt=new Uint8Array(128);for(let t=0;t<Gt.length;t++){let e=Gt.charCodeAt(t);rr[t]=e,Zt[e]=t}function te(t,e){let n=0,r=0,o=0;do{let s=t.next();o=Zt[s],n|=(o&31)<<r,r+=5}while(o&32);let i=n&1;return n>>>=1,i&&(n=-2147483648|-n),e+n}function Jt(t,e){return t.pos>=e?!1:t.peek()!==nr}var Lo=1024*16;var or=class{constructor(t){this.pos=0,this.buffer=t}next(){return this.buffer.charCodeAt(this.pos++)}peek(){return this.buffer.charCodeAt(this.pos)}indexOf(t){let{buffer:e,pos:n}=this,r=e.indexOf(t,n);return r===-1?e.length:r}};function Kt(t){let{length:e}=t,n=new or(t),r=[],o=0,i=0,s=0,l=0,a=0;do{let c=n.indexOf(\";\"),f=[],u=!0,g=0;for(o=0;n.pos<c;){let p;o=te(n,o),o<g&&(u=!1),g=o,Jt(n,c)?(i=te(n,i),s=te(n,s),l=te(n,l),Jt(n,c)?(a=te(n,a),p=[o,i,s,l,a]):p=[o,i,s,l]):p=[o],f.push(p),n.pos++}u||ir(f),r.push(f),n.pos=c+1}while(n.pos<=e);return r}function ir(t){t.sort(sr)}function sr(t,e){return t[0]-e[0]}var en=Qe(Yt(),1);function lr(t){if(!t)return\"\";let e=t.lastIndexOf(\"/\");return t.slice(0,e+1)}function ur(t,e){let n=lr(t),r=e?e+\"/\":\"\";return o=>(0,en.default)(r+(o||\"\"),n)}var D=0,cr=1,ar=2,fr=3,_r=4;function dr(t,e){let n=Qt(t,0);if(n===t.length)return t;e||(t=t.slice());for(let r=n;r<t.length;r=Qt(t,r+1))t[r]=pr(t[r],e);return t}function Qt(t,e){for(let n=e;n<t.length;n++)if(!hr(t[n]))return n;return t.length}function hr(t){for(let e=1;e<t.length;e++)if(t[e][D]<t[e-1][D])return!1;return!0}function pr(t,e){return e||(t=t.slice()),t.sort(mr)}function mr(t,e){return t[D]-e[D]}var me=!1;function vr(t,e,n,r){for(;n<=r;){let o=n+(r-n>>1),i=t[o][D]-e;if(i===0)return me=!0,o;i<0?n=o+1:r=o-1}return me=!1,n-1}function gr(t,e,n){for(let r=n+1;r<t.length&&t[r][D]===e;n=r++);return n}function yr(t,e,n){for(let r=n-1;r>=0&&t[r][D]===e;n=r--);return n}function xr(){return{lastKey:-1,lastNeedle:-1,lastIndex:-1}}function br(t,e,n,r){let{lastKey:o,lastNeedle:i,lastIndex:s}=n,l=0,a=t.length-1;if(r===o){if(e===i)return me=s!==-1&&t[s][D]===e,s;e>=i?l=s===-1?0:s:a=s}return n.lastKey=r,n.lastNeedle=e,n.lastIndex=vr(t,e,l,a)}function Cr(t){return typeof t==\"string\"?JSON.parse(t):t}var Sr=\"`line` must be greater than 0 (lines start at line 1)\",wr=\"`column` must be greater than or equal to 0 (columns start at column 0)\",Xt=-1,kr=1,tn=class{constructor(t,e){let n=typeof t==\"string\";if(!n&&t._decodedMemo)return t;let r=Cr(t),{version:o,file:i,names:s,sourceRoot:l,sources:a,sourcesContent:c}=r;this.version=o,this.file=i,this.names=s||[],this.sourceRoot=l,this.sources=a,this.sourcesContent=c,this.ignoreList=r.ignoreList||r.x_google_ignoreList||void 0;let f=ur(e,l);this.resolvedSources=a.map(f);let{mappings:u}=r;if(typeof u==\"string\")this._encoded=u,this._decoded=void 0;else if(Array.isArray(u))this._encoded=void 0,this._decoded=dr(u,n);else throw r.sections?new Error(\"TraceMap passed sectioned source map, please use FlattenMap export instead\"):new Error(`invalid source map: ${JSON.stringify(r)}`);this._decodedMemo=xr(),this._bySources=void 0,this._bySourceMemos=void 0}};function Er(t){var e;return(e=t)._decoded||(e._decoded=Kt(t._encoded))}function nn(t,e){let{line:n,column:r,bias:o}=e;if(n--,n<0)throw new Error(Sr);if(r<0)throw new Error(wr);let i=Er(t);if(n>=i.length)return pe(null,null,null,null);let s=i[n],l=Rr(s,t._decodedMemo,n,r,o||kr);if(l===-1)return pe(null,null,null,null);let a=s[l];if(a.length===1)return pe(null,null,null,null);let{names:c,resolvedSources:f}=t;return pe(f[a[cr]],a[ar]+1,a[fr],a.length===5?c[a[_r]]:null)}function pe(t,e,n,r){return{source:t,line:e,column:n,name:r}}function Rr(t,e,n,r,o){let i=br(t,r,e,n);return me?i=(o===Xt?gr:yr)(t,r,i):o===Xt&&i++,i===-1||i===t.length?-1:i}var ln=Qe(sn(),1),Lr=t=>decodeURIComponent(new URL(t).pathname).replace(/^\\/([a-zA-Z]:)/,\"$1\");function Nr(t){let e=t.match(/\\/\\/# sourceMappingURL=data:application\\/json[^,]+base64,([A-Za-z0-9+/=]+)/);return e?JSON.parse(atob(e[1])):void 0}async function un({stack:t,fs:e,sourceRoot:n,sourcemap:r}){let o=zt(t),i=[...new Set(o.map(a=>a.file))],s={};if(r)for(let a of i){let c;if(a.startsWith(\"file://\")&&(c=await e.promises.readFile(Lr(a),\"utf8\")),(a.startsWith(\"http://\")||a.startsWith(\"https://\"))&&(c=await(await fetch(a)).text()),c){let f=Nr(c);f&&(s[a]=new tn(f))}}let l=[];for(let a of o){let c={thrown:a};s[a.file]&&(c.orig=nn(s[a.file],{line:a.lineNumber,column:a.column}),c.orig&&c.orig.source&&(c.line=c.orig.line,c.column=c.orig.column,c.name=c.orig.name,n?c.file=ln.default.relative(n,c.orig.source):c.file=c.orig.source,(c.orig.source.includes(\"node_modules\")||c.file.startsWith(\"..\"))&&(c.noisy=!0))),(!c.orig||!c.orig.source)&&(c.file=c.thrown.file,c.name=c.thrown.methodName,c.line=c.thrown.lineNumber,c.column=c.thrown.column),l.push(c)}return l}var ne=class{constructor({refs:e,props:n,url:r,localFetch:o,sourceRoot:i,sourcemap:s,fs:l,request:a}={}){this.isoRefState=new fe({initialRefValues:e}),this.routerState=new X({url:r}),this.url=r,this.props=n,this.headChildren=[],this.localFetch=o,this.errorFallback=qe,this.sourceRoot=i,this.sourcemap=s,this.fs=l,this.request=a}isSsr(){return!globalThis.window}getData(){return{refs:this.isoRefState.getSharedRefValues(),props:this.props}}fetch=async(e,n={})=>{if(this.isSsr()&&e.startsWith(\"/\")&&this.localFetch){e=new URL(this.request.url).origin+e;let r=new Request(e.toString(),n);this.request.headers.get(\"cookie\")&&r.headers.set(\"cookie\",this.request.headers.get(\"cookie\"));let o=await this.localFetch(r);return o.status!=200&&console.log(\"****** local fetch failed\"),o}return e.startsWith(\"/\")&&(e=new URL(this.url).origin+e),await globalThis.fetch(e,n)};async processError(e){e.stackFrames=await un({stack:e.stack,sourceRoot:this.sourceRoot,sourcemap:this.sourcemap,fs:this.fs})}};var Je=P();function $(){return M(Je)}function Ze({isoState:t,children:e}){return v(Je.Provider,{value:t,children:v($e,{fallback:qe,children:v(_e.Provider,{value:t.isoRefState,children:v(Be,{routerState:t.routerState,children:e})})})})}function ve({href:t,to:e,...n}){e&&!t&&(t=e);let r=He(),o=\"a\";function i(s){n.onClick&&n.onClick(s),n.onclick&&n.onclick(s),!s.defaultPrevented&&(s.preventDefault(),t&&r(t))}return v(o,{href:t,...n,onClick:i,children:n.children})}function Ur(){return v(\"div\",{children:\"This is page one\"})}function Pr(){throw new Error(\"this is an error...\")}function cn({hello:t}){let e=de();return e.current||(e.current=123),v(k,{children:[\"ref: \",e.current,\"hello: \",t,v(\"div\",{children:[v(ve,{href:\"/pageone\",children:\"One\"}),v(ve,{href:\"/pagetwo\",children:\"Two\"})]}),v(he,{path:\"/pageone\",children:v(Ur,{})}),v(he,{path:\"/pagetwo\",children:v(Pr,{})})]})}var Tr=[],an={sourceRoot:\"/home/micke/Repo/isoq/examples/basic\",sourcemap:!0};function Ar(t){return new ne({sourceRoot:an.sourceRoot,sourcemap:an.sourcemap,...t})}function Mr({isoState:t}){let e=v(cn,{...t.props});for(let n of[...Tr].reverse())e=v(n,{...t.props,children:e});return v(Ze,{isoState:t,children:e})}if(globalThis.window&&globalThis.window.__iso){let t=Ar({refs:globalThis.window.__iso.refs,props:globalThis.window.__iso.props,url:globalThis.window.location});le(v(Mr,{isoState:t}),globalThis.window.document.getElementById(\"isoq\"))}\n//# sourceMappingURL=data:application/json;base64,\n";

import fs from "fs";

let requestHandlerInstance=new IsoqRequestHandler({
	clientModule: clientModule,
	clientSource: clientSource,
	fs: fs,
	...{}
});

let requestHandler=requestHandlerInstance.handleRequest;

export default requestHandler;
